
# Commands:

cppFlags = -O3
cppVersion = -std=c++2a

header = ../Source/Common/Header.hpp
interface = ../Source/Common/interface.hpp

serialiser = ../Source/Utility/Serialiser.hpp
stack = ../Source/Utility/Stack.hpp
arguments = ../Source/Utility/Arguments.hpp

token = ../Source/Token/Token.hpp
program = ../Source/Compiler/Program.hpp

rule compile
    command = clang++ -g -c $cppFlags -o $out $in $cppVersion

rule link
    command = clang++ $cppFlags -g -o $out $in $cppVersion

# Virtual Processor

build      Build/Token.o: compile ../Source/Token/Token.cpp         | $header $token
build      Build/Lexer.o: compile ../Source/Lexer/Lexer.cpp         | $header $token

build    Build/Manager.o: compile ../Source/Manager/Manager.cpp     | $header

build  Build/Converter.o: compile ../Source/Utility/Converter.cpp   | $header
build      Build/Regex.o: compile ../Source/Utility/Regex.cpp       | $header

build    Build/Complex.o: compile ../Source/Types/Complex.cpp       | $header

build      Build/Wings.o: compile ../Source/Preprocessor/Wings.cpp  | $header $program $token $serialiser

build  Build/Libraries.o: compile ../Source/Compiler/Libraries.cpp  | $header
build    Build/Program.o: compile ../Source/Compiler/Program.cpp    | $header $program $token $serialiser
build   Build/Compiler.o: compile ../Source/Compiler/Compiler.cpp   | $header $stack $program $token $serialiser
build Build/Decompiler.o: compile ../Source/Compiler/Decompiler.cpp | $interface $header $program $serialiser

build  Build/Processor.o: compile ../Source/Virtual/Processor.cpp   | $interface $header $stack $program $serialiser

# Main:

build Build/Spin.o: compile Spin.cpp | $interface $header $program $token $serialiser $arguments

# Link:

build spin: link Build/Spin.o Build/Token.o Build/Lexer.o Build/Manager.o Build/Converter.o Build/Regex.o Build/Complex.o Build/Wings.o Build/Libraries.o Build/Program.o Build/Compiler.o Build/Decompiler.o Build/Processor.o
